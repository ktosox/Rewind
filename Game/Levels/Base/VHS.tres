[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;	
render_mode blend_mix;	


float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
	}

void fragment() {	
    vec4 texColor = vec4(0);
    // get position to sample
    vec2 samplePosition = UV;
    float whiteNoise = 9999.0;	

 	// Jitter each line left and right
    samplePosition.x = samplePosition.x+(rand(vec2(TIME,UV.y))-0.5)/104.0;
    // Jitter the whole picture up and down
    samplePosition.y = samplePosition.y+(rand(vec2(TIME))-0.5)/92.0;
    // Slightly add color noise to each line
    texColor = texColor + (vec4(-0.5)+vec4(rand(vec2(UV.y,TIME)),rand(vec2(UV.y,TIME+1.0)),rand(vec2(UV.y,TIME+2.0)),0))*0.1;
   
    // Either sample the texture, or just make the pixel white (to get the staticy-bit at the bottom)
    whiteNoise = rand(vec2(floor(samplePosition.y*180.0),floor(samplePosition.x*50.0))+vec2(TIME,0));
    if (whiteNoise > 11.5-33.0*samplePosition.y || whiteNoise < 1.9-5.2*samplePosition.y*abs(sin(TIME) )) {
        // Sample the texture.
    	samplePosition.y = 1.0-samplePosition.y; //Fix for upside-down texture
    	texColor = texColor + texture(TEXTURE,samplePosition);
    } else {
        // Use white. (I'm adding here so the color noise still applies)
        texColor = vec4(1);
    }
	COLOR = texColor;



	}	"

[resource]
shader = SubResource( 3 )
